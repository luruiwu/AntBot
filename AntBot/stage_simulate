#!/usr/bin/python
# -*- coding: UTF-8 -*-
from Tkinter import *       # 导入 Tkinter 库
import thread
import time
import os
class MessageShow:
	def __init__(self):	
		
		#传入参数　消息内容　和这条消息显示的时间
		
		#消息显示的时间
		#self.WaitTime=time
		self.root = Tk()                     # 创建窗口对象的背景色
		self.root.wm_title("机器人控制主窗口")#title
		#居中显示
		self.root.resizable(False,False)
		self.root.update() # update window ,must do
		curWidth = self.root.winfo_reqwidth() # get current width
		curHeight = self.root.winfo_height() # get current height
		scnWidth,scnHeight = self.root.maxsize() # get screen width and height
		tmpcnf = '%dx%d+%d+%d'%(200,500,(scnWidth-curWidth)/2+600,(scnHeight-curHeight)/2-400)
		self.root.geometry(tmpcnf)
		
		#l1=Label(self.root,text=message,background="yellow")
		#font=("宋体", 12, "normal")
		#l1=Label(self.root,text=message,foreground="red")
		#l1.pack(side=TOP,expand=YES)
		
		#按键添加如下
		self.b1=Button(self.root,text="启动stage",height=2,command=self.b1Command).pack(fill=X)
		self.b2=Button(self.root,text="启动amcl",height=2,command=self.b2Command).pack(fill=X)
		self.b3=Button(self.root,text="启动map server",height=2,command=self.b3Command).pack(fill=X)
		self.b4=Button(self.root,text="启动purepursuit",height=2,command=self.b4Command).pack(fill=X)
		self.b5=Button(self.root,text="启动purepursuit_marker",height=2,command=self.b5Command).pack(fill=X)
		
		self.b6=Button(self.root,text="启动stage_gmapping",height=2,command=self.b6Command).pack(fill=X)
		self.b7=Button(self.root,text="启动key_telep",height=2,command=self.b7Command).pack(fill=X)
		self.b8=Button(self.root,text="保存地图",height=2,command=self.b8Command).pack(fill=X)
		self.b9=Button(self.root,text="清除地图",height=2,command=self.b9Command).pack(fill=X)
		self.quit=Button(self.root,text="退出",height=2,command=self.autoDestory).pack(fill=X)
		
		#thread.start_new_thread(self.autoDestory,())
		self.root.mainloop()                 # 进入消息循环
	def b1Command(self):
		os.system("gnome-terminal -x bash -c \"roslaunch antbot_stage stage.launch --screen\"")
		self.b1['bg']='red'
	def b2Command(self):
		os.system("gnome-terminal -x bash -c \"roslaunch antbot_navigation fake_amcl.launch\"")
	def b3Command(self):
		os.system("gnome-terminal -x bash -c \"roslaunch antbot_navigation fake_map_server.launch\"")
	def b4Command(self):
		os.system("gnome-terminal -x bash -c \"roslaunch purepursuit_planner purepursuit.launch\"")
	def b5Command(self):
		os.system("gnome-terminal -x bash -c \"roslaunch purepursuit_planner purepursuit_marker.launch\"")
	def b6Command(self):
		os.system("gnome-terminal -x bash -c \"roslaunch antbot_gmapping stage_gmapping.launch\"")
	def b7Command(self):
		os.system("gnome-terminal -x bash -c \"roslaunch antbot_teleop key_teleop.launch\"")
	def b8Command(self):
		os.system("gnome-terminal -x bash -c \"rosrun map_server map_saver -f ~/stage\"")
	def b9Command(self):
		os.system("gnome-terminal -x bash -c \"rm -f ~/stage.*\"")
	def autoDestory(self):
		self.root.destroy()
if __name__=='__main__':
	MessageShow()
	
