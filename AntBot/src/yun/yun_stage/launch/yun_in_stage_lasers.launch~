<!-- 
  Yun navigation simulation:
  - stage
  - map_server
  - move_base
  - static map
  - amcl
  - rviz view
 -->
<launch>
  <arg name="initial_pose_x" default="0.0"/>
  <arg name="initial_pose_y" default="0.0"/>
  <arg name="initial_pose_a" default="0.0"/>
  <arg name="world_file" default=" $(find yun_stage)/maps/stage/maze.world"/>
  <arg name="map_file" default=" $(find yun_stage)/maps/yun_3_3.yaml"/> <!-- robopark_plan -->
  <!--arg name="map_file"       default=" $(env TURTLEBOT_STAGE_MAP_FILE)"/--> <!-- robopark_plan -->
  <!--arg name="world_file"     default=" $(env TURTLEBOT_STAGE_WORLD_FILE)"/-->
  <param name="/use_sim_time" value="true"/><!--没有会出现TF错误-->
  <!--  ******************** Stage ********************  -->
  <!-- 
        Publishes transforms:
          /base_link -> /base_laser
          /base_footprint -> /base_link (identity)
          /odom -> base_footprint
        Publishes topics:
          /odom : odometry data from the simulated odometry
          /base_scan : laser data from the simulated laser
          /base_pose_ground_truth : the ground truth pose
        Parameters:
          base_watchdog_timeout : time (s) after receiving the last command on cmd_vel before stopping the robot
        Args:
          -g : run in headless mode.
  --> 
 
  <node pkg="stage_ros" type="stageros" name="stageros" args="$(arg world_file)">
   <param name="base_watchdog_timeout" value="0.5"/>
    <remap from="odom" to="odom"/>
    <remap from="base_scan" to="scan"/>
    <remap from="cmd_vel" to="smooth_cmd_vel"/>
  </node>
  
  
  <!-- ***********************Robot Model***********************-->
  	<arg name="urdf_file" default="$(find xacro)/xacro.py $(find yun_description)/urdf/yun.urdf_lasers.xacro"/>
	<param name="robot_description" command="$(arg urdf_file)" />
	
	<!--node name="rviz" pkg="rviz" type="rviz" args="-d $(find yun_description)/launch/yun_demo.rviz" required="true" /-->
	<arg name="source_list" default="[wheel_joint_states]"/>
	<node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
		<rosparam param="source_list" subst_value="True">$(arg source_list)</rosparam>
		<param name="use_gui" type="Boolean" value="False"/>
	</node>
	<!--  The package takes the joint angles of the robot as input and publishes the 3D poses of the robot links-->
	<node name="robot_state_publisher" pkg="robot_state_publisher" type="state_publisher" />

  <!--  ************** Navigation  ***************  -->
  <include file="$(find yun_nav)/launch/includes/stage_move_base.launch.xml"/>
  <!-- for sbpl-->
  <!--include file="$(find yun_nav)/param/move_base_sbpl.launch.xml"/-->

  <!--  ****** Maps *****  -->
  <node name="map_server" pkg="map_server" type="map_server" args="$(arg map_file)">
    <param name="frame_id" value="/map"/>
  </node>
  <!--node pkg="tf" type="static_transform_publisher" name="odom_map_broadcaster" args="0 0 0 0 0 0 /map /odom 100" /-->

<!--  **************** Amcl ****************  -->
  <include file="$(find yun_nav)/launch/includes/amcl/amcl.launch.xml">
    <arg name="scan_topic" value="scan"/>
    <arg name="use_map_topic" value="true"/>
    
    <arg name="initial_pose_x" value="$(arg initial_pose_x)"/>
    <arg name="initial_pose_y" value="$(arg initial_pose_y)"/>
    <arg name="initial_pose_a" value="$(arg initial_pose_a)"/>
   
  </include>

  <!--  **************** Visualisation ****************  -->
  <node name="rviz" pkg="rviz" type="rviz" args="-d $(find yun_stage)/rviz/nav.rviz"/>
  
  <!--  **************** yocs_velocity_smoother ****************  -->
  <include file="$(find yun_bringup)/launch/includes/standalone.launch.xml"/>

  <!--  **************** laserscan_multi_merger ****************  -->
  <include file="$(find yun_stage)/launch/includes/laserscan_multi_merger.launch.xml"/>

</launch>











