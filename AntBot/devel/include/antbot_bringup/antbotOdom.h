// Generated by gencpp from file antbot_bringup/antbotOdom.msg
// DO NOT EDIT!


#ifndef ANTBOT_BRINGUP_MESSAGE_ANTBOTODOM_H
#define ANTBOT_BRINGUP_MESSAGE_ANTBOTODOM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace antbot_bringup
{
template <class ContainerAllocator>
struct antbotOdom_
{
  typedef antbotOdom_<ContainerAllocator> Type;

  antbotOdom_()
    : vx(0.0)
    , vy(0.0)
    , vth(0.0)  {
    }
  antbotOdom_(const ContainerAllocator& _alloc)
    : vx(0.0)
    , vy(0.0)
    , vth(0.0)  {
  (void)_alloc;
    }



   typedef float _vx_type;
  _vx_type vx;

   typedef float _vy_type;
  _vy_type vy;

   typedef float _vth_type;
  _vth_type vth;




  typedef boost::shared_ptr< ::antbot_bringup::antbotOdom_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::antbot_bringup::antbotOdom_<ContainerAllocator> const> ConstPtr;

}; // struct antbotOdom_

typedef ::antbot_bringup::antbotOdom_<std::allocator<void> > antbotOdom;

typedef boost::shared_ptr< ::antbot_bringup::antbotOdom > antbotOdomPtr;
typedef boost::shared_ptr< ::antbot_bringup::antbotOdom const> antbotOdomConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::antbot_bringup::antbotOdom_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::antbot_bringup::antbotOdom_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace antbot_bringup

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'antbot_bringup': ['/home/pepper/AntBot/src/antbot/antbot_bringup/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::antbot_bringup::antbotOdom_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::antbot_bringup::antbotOdom_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::antbot_bringup::antbotOdom_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::antbot_bringup::antbotOdom_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::antbot_bringup::antbotOdom_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::antbot_bringup::antbotOdom_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::antbot_bringup::antbotOdom_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2ed912b0fd0de10da7b827f569b8b385";
  }

  static const char* value(const ::antbot_bringup::antbotOdom_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2ed912b0fd0de10dULL;
  static const uint64_t static_value2 = 0xa7b827f569b8b385ULL;
};

template<class ContainerAllocator>
struct DataType< ::antbot_bringup::antbotOdom_<ContainerAllocator> >
{
  static const char* value()
  {
    return "antbot_bringup/antbotOdom";
  }

  static const char* value(const ::antbot_bringup::antbotOdom_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::antbot_bringup::antbotOdom_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 vx\n\
float32 vy\n\
float32 vth\n\
\n\
";
  }

  static const char* value(const ::antbot_bringup::antbotOdom_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::antbot_bringup::antbotOdom_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vx);
      stream.next(m.vy);
      stream.next(m.vth);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct antbotOdom_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::antbot_bringup::antbotOdom_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::antbot_bringup::antbotOdom_<ContainerAllocator>& v)
  {
    s << indent << "vx: ";
    Printer<float>::stream(s, indent + "  ", v.vx);
    s << indent << "vy: ";
    Printer<float>::stream(s, indent + "  ", v.vy);
    s << indent << "vth: ";
    Printer<float>::stream(s, indent + "  ", v.vth);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ANTBOT_BRINGUP_MESSAGE_ANTBOTODOM_H
