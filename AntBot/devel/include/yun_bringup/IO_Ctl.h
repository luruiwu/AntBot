// Generated by gencpp from file yun_bringup/IO_Ctl.msg
// DO NOT EDIT!


#ifndef YUN_BRINGUP_MESSAGE_IO_CTL_H
#define YUN_BRINGUP_MESSAGE_IO_CTL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace yun_bringup
{
template <class ContainerAllocator>
struct IO_Ctl_
{
  typedef IO_Ctl_<ContainerAllocator> Type;

  IO_Ctl_()
    : led(0)
    , fa(0)
    , charge(0)  {
    }
  IO_Ctl_(const ContainerAllocator& _alloc)
    : led(0)
    , fa(0)
    , charge(0)  {
  (void)_alloc;
    }



   typedef uint8_t _led_type;
  _led_type led;

   typedef uint8_t _fa_type;
  _fa_type fa;

   typedef uint8_t _charge_type;
  _charge_type charge;




  typedef boost::shared_ptr< ::yun_bringup::IO_Ctl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::yun_bringup::IO_Ctl_<ContainerAllocator> const> ConstPtr;

}; // struct IO_Ctl_

typedef ::yun_bringup::IO_Ctl_<std::allocator<void> > IO_Ctl;

typedef boost::shared_ptr< ::yun_bringup::IO_Ctl > IO_CtlPtr;
typedef boost::shared_ptr< ::yun_bringup::IO_Ctl const> IO_CtlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::yun_bringup::IO_Ctl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::yun_bringup::IO_Ctl_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace yun_bringup

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'yun_bringup': ['/home/pepper/AntBot/src/yun/yun_bringup/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::yun_bringup::IO_Ctl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yun_bringup::IO_Ctl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yun_bringup::IO_Ctl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yun_bringup::IO_Ctl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yun_bringup::IO_Ctl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yun_bringup::IO_Ctl_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::yun_bringup::IO_Ctl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c09423b168532f99ab3ae02d90d808ec";
  }

  static const char* value(const ::yun_bringup::IO_Ctl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc09423b168532f99ULL;
  static const uint64_t static_value2 = 0xab3ae02d90d808ecULL;
};

template<class ContainerAllocator>
struct DataType< ::yun_bringup::IO_Ctl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "yun_bringup/IO_Ctl";
  }

  static const char* value(const ::yun_bringup::IO_Ctl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::yun_bringup::IO_Ctl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 led #0-2\n\
uint8 fa  #0-2\n\
uint8 charge #0-2\n\
";
  }

  static const char* value(const ::yun_bringup::IO_Ctl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::yun_bringup::IO_Ctl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.led);
      stream.next(m.fa);
      stream.next(m.charge);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IO_Ctl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::yun_bringup::IO_Ctl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::yun_bringup::IO_Ctl_<ContainerAllocator>& v)
  {
    s << indent << "led: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.led);
    s << indent << "fa: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fa);
    s << indent << "charge: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.charge);
  }
};

} // namespace message_operations
} // namespace ros

#endif // YUN_BRINGUP_MESSAGE_IO_CTL_H
